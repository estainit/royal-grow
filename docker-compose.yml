version: '3.8'

services:

  # PostgreSQL database
  db:
    build:
      context: db
      dockerfile: Dockerfile
      args:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
    image: rgi_db
    container_name: rgc_db
    ports:
      - "5433:5432"
    networks:
      - rgnetwork

  # Node.js server
  backend:
    build:
      context: backend
      dockerfile: Dockerfile
      target: dev  # Explicitly use the dev stage
    image: rgi_be
    container_name: rgc_be
    ports:
      - "3100:3100"  # your existing port
    volumes:
      - ./backend:/backend
      - /backend/node_modules  # Preserve container's node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true  # Enable polling for better file watching in Docker
    depends_on:
      - db
    networks:
      - rgnetwork
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/health"] 
      interval: 30s
      timeout: 10s
      retries: 3

  # Hardhat service
  hardhat:
    build:
      context: hardhat
      dockerfile: Dockerfile
    image: rgi_hh
    container_name: rgc_hh
    ports:
      - "8545:8545"  # Expose Hardhat node port
    networks:
      - rgnetwork
    volumes:
      - ./hardhat:/hardhat  # Bind host's ./hardhat to container's /hardhat
    depends_on:
      - db  # Ensure database is started before Hardhat (if needed)
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    restart: unless-stopped
    environment:
      - NODE_OPTIONS=--max-old-space-size=1536

  # React application
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    image: rgi_fe
    container_name: rgc_fe
    ports:
      - "81:3000"  # Expose frontend port
    volumes:
      - ./frontend:/frontend
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://cryptafe.com/api
    depends_on:
      - backend
    networks:
      - rgnetwork
    restart: unless-stopped

  # pgAdmin (Web UI for PostgreSQL)
  pgadmin:
    build:
      context: pgadmin
      dockerfile: Dockerfile
      args:
        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    image: rgi_pgadmin
    container_name: rgc_pgadmin
    ports:
      - "5050:80"  # Expose pgAdmin on port 5050
#    environment:
#      - PGADMIN_DEFAULT_EMAIL=admin@cryptafe.com
#      - PGADMIN_DEFAULT_PASSWORD=admin123  # Change this in production!
    depends_on:
      - db
    networks:
      - rgnetwork
    restart: unless-stopped

networks:
  rgnetwork:
    driver: bridge



